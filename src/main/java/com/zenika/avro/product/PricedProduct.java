/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.zenika.avro.product;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PricedProduct extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PricedProduct\",\"namespace\":\"com.zenika.avro.product\",\"fields\":[{\"name\":\"label\",\"type\":\"string\",\"doc\":\"The label\"},{\"name\":\"priceHT\",\"type\":\"double\",\"doc\":\"The price HT\"},{\"name\":\"priceTTC\",\"type\":\"double\",\"doc\":\"The price TTC\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The label */
  @Deprecated public java.lang.CharSequence label;
  /** The price HT */
  @Deprecated public double priceHT;
  /** The price TTC */
  @Deprecated public double priceTTC;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PricedProduct() {}

  /**
   * All-args constructor.
   */
  public PricedProduct(java.lang.CharSequence label, java.lang.Double priceHT, java.lang.Double priceTTC) {
    this.label = label;
    this.priceHT = priceHT;
    this.priceTTC = priceTTC;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return label;
    case 1: return priceHT;
    case 2: return priceTTC;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: label = (java.lang.CharSequence)value$; break;
    case 1: priceHT = (java.lang.Double)value$; break;
    case 2: priceTTC = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'label' field.
   * The label   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * The label   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'priceHT' field.
   * The price HT   */
  public java.lang.Double getPriceHT() {
    return priceHT;
  }

  /**
   * Sets the value of the 'priceHT' field.
   * The price HT   * @param value the value to set.
   */
  public void setPriceHT(java.lang.Double value) {
    this.priceHT = value;
  }

  /**
   * Gets the value of the 'priceTTC' field.
   * The price TTC   */
  public java.lang.Double getPriceTTC() {
    return priceTTC;
  }

  /**
   * Sets the value of the 'priceTTC' field.
   * The price TTC   * @param value the value to set.
   */
  public void setPriceTTC(java.lang.Double value) {
    this.priceTTC = value;
  }

  /** Creates a new PricedProduct RecordBuilder */
  public static com.zenika.avro.product.PricedProduct.Builder newBuilder() {
    return new com.zenika.avro.product.PricedProduct.Builder();
  }
  
  /** Creates a new PricedProduct RecordBuilder by copying an existing Builder */
  public static com.zenika.avro.product.PricedProduct.Builder newBuilder(com.zenika.avro.product.PricedProduct.Builder other) {
    return new com.zenika.avro.product.PricedProduct.Builder(other);
  }
  
  /** Creates a new PricedProduct RecordBuilder by copying an existing PricedProduct instance */
  public static com.zenika.avro.product.PricedProduct.Builder newBuilder(com.zenika.avro.product.PricedProduct other) {
    return new com.zenika.avro.product.PricedProduct.Builder(other);
  }
  
  /**
   * RecordBuilder for PricedProduct instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PricedProduct>
    implements org.apache.avro.data.RecordBuilder<PricedProduct> {

    private java.lang.CharSequence label;
    private double priceHT;
    private double priceTTC;

    /** Creates a new Builder */
    private Builder() {
      super(com.zenika.avro.product.PricedProduct.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.zenika.avro.product.PricedProduct.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.priceHT)) {
        this.priceHT = data().deepCopy(fields()[1].schema(), other.priceHT);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.priceTTC)) {
        this.priceTTC = data().deepCopy(fields()[2].schema(), other.priceTTC);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PricedProduct instance */
    private Builder(com.zenika.avro.product.PricedProduct other) {
            super(com.zenika.avro.product.PricedProduct.SCHEMA$);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.priceHT)) {
        this.priceHT = data().deepCopy(fields()[1].schema(), other.priceHT);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.priceTTC)) {
        this.priceTTC = data().deepCopy(fields()[2].schema(), other.priceTTC);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'label' field */
    public java.lang.CharSequence getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public com.zenika.avro.product.PricedProduct.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.label = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'label' field */
    public com.zenika.avro.product.PricedProduct.Builder clearLabel() {
      label = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'priceHT' field */
    public java.lang.Double getPriceHT() {
      return priceHT;
    }
    
    /** Sets the value of the 'priceHT' field */
    public com.zenika.avro.product.PricedProduct.Builder setPriceHT(double value) {
      validate(fields()[1], value);
      this.priceHT = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'priceHT' field has been set */
    public boolean hasPriceHT() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'priceHT' field */
    public com.zenika.avro.product.PricedProduct.Builder clearPriceHT() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'priceTTC' field */
    public java.lang.Double getPriceTTC() {
      return priceTTC;
    }
    
    /** Sets the value of the 'priceTTC' field */
    public com.zenika.avro.product.PricedProduct.Builder setPriceTTC(double value) {
      validate(fields()[2], value);
      this.priceTTC = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'priceTTC' field has been set */
    public boolean hasPriceTTC() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'priceTTC' field */
    public com.zenika.avro.product.PricedProduct.Builder clearPriceTTC() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public PricedProduct build() {
      try {
        PricedProduct record = new PricedProduct();
        record.label = fieldSetFlags()[0] ? this.label : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.priceHT = fieldSetFlags()[1] ? this.priceHT : (java.lang.Double) defaultValue(fields()[1]);
        record.priceTTC = fieldSetFlags()[2] ? this.priceTTC : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
